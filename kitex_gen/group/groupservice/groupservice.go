// Code generated by Kitex v0.5.2. DO NOT EDIT.

package groupservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	group "im-demo/kitex_gen/group"
)

func serviceInfo() *kitex.ServiceInfo {
	return groupServiceServiceInfo
}

var groupServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "GroupService"
	handlerType := (*group.GroupService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateGroup": kitex.NewMethodInfo(createGroupHandler, newGroupServiceCreateGroupArgs, newGroupServiceCreateGroupResult, false),
		"JoinGroup":   kitex.NewMethodInfo(joinGroupHandler, newGroupServiceJoinGroupArgs, newGroupServiceJoinGroupResult, false),
		"GetGroupMem": kitex.NewMethodInfo(getGroupMemHandler, newGroupServiceGetGroupMemArgs, newGroupServiceGetGroupMemResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "group",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func createGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*group.GroupServiceCreateGroupArgs)
	realResult := result.(*group.GroupServiceCreateGroupResult)
	success, err := handler.(group.GroupService).CreateGroup(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGroupServiceCreateGroupArgs() interface{} {
	return group.NewGroupServiceCreateGroupArgs()
}

func newGroupServiceCreateGroupResult() interface{} {
	return group.NewGroupServiceCreateGroupResult()
}

func joinGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*group.GroupServiceJoinGroupArgs)
	realResult := result.(*group.GroupServiceJoinGroupResult)
	success, err := handler.(group.GroupService).JoinGroup(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGroupServiceJoinGroupArgs() interface{} {
	return group.NewGroupServiceJoinGroupArgs()
}

func newGroupServiceJoinGroupResult() interface{} {
	return group.NewGroupServiceJoinGroupResult()
}

func getGroupMemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*group.GroupServiceGetGroupMemArgs)
	realResult := result.(*group.GroupServiceGetGroupMemResult)
	success, err := handler.(group.GroupService).GetGroupMem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGroupServiceGetGroupMemArgs() interface{} {
	return group.NewGroupServiceGetGroupMemArgs()
}

func newGroupServiceGetGroupMemResult() interface{} {
	return group.NewGroupServiceGetGroupMemResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateGroup(ctx context.Context, req *group.CreateGroupRequest) (r *group.CommonResponse, err error) {
	var _args group.GroupServiceCreateGroupArgs
	_args.Req = req
	var _result group.GroupServiceCreateGroupResult
	if err = p.c.Call(ctx, "CreateGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) JoinGroup(ctx context.Context, req *group.JoinGroupRequest) (r *group.CommonResponse, err error) {
	var _args group.GroupServiceJoinGroupArgs
	_args.Req = req
	var _result group.GroupServiceJoinGroupResult
	if err = p.c.Call(ctx, "JoinGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGroupMem(ctx context.Context, req *group.GetGroupMemRequest) (r *group.GetGroupMemResponse, err error) {
	var _args group.GroupServiceGetGroupMemArgs
	_args.Req = req
	var _result group.GroupServiceGetGroupMemResult
	if err = p.c.Call(ctx, "GetGroupMem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
